{
  "address": "0x9a63964DeC87232b28670cfd8D5a788C6c988d28",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DirectMintFromContractNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExceedsAllocatedForFounders",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExceedsAllocatedForFreeSale",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExceedsAllocatedForPreSale",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExceedsCashierMaxSupply",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExceedsFreeMaxSupply",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExceedsPreSaleSupply",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExceedsVipServiceMaxSupply",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientETHSent",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotOnWhitelist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PublicSaleInactive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SaleInactive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WithdrawalFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remainingSupply",
          "type": "uint256"
        }
      ],
      "name": "Minted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CASHIER_SALE_MINT_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CASHIER_SALE_SUPPLY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FOUNDERS_SUPPLY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FREE_SALE_MINT_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FREE_SALE_SUPPLY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_SUPPLY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRE_SALE_SUPPLY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VIP_SERVICE_SALE_SUPPLY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseUriSuffix",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cashierSaleAmountMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "mintQuantity",
          "type": "uint256"
        }
      ],
      "name": "cashierSaleBuy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "cashierSaleClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cashierSaleEndTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cashierSaleStartPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cashierSaleStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "foundersAmountMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "mintQuantity",
          "type": "uint256"
        }
      ],
      "name": "foundersMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addressArr",
          "type": "address[]"
        }
      ],
      "name": "foundersMintOneTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "freeSaleAmountMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "freeSaleBuy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "freeSaleClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "freeSaleEndTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "freeSaleStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRemainingSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isWithinTimeOfCashier",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isWithinTimeOfFree",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isWithinTimeOfVipService",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isWithinTimeOfWl",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "preSaleAmountMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        }
      ],
      "name": "setCashierSaleTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        }
      ],
      "name": "setFreeSaleTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        }
      ],
      "name": "setMerkleRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        }
      ],
      "name": "setVipServiceSaleTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        }
      ],
      "name": "setWlSaleTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vipServiceSaleAmountMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "mintQuantity",
          "type": "uint256"
        }
      ],
      "name": "vipServiceSaleBuy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vipServiceSaleStartPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vipServiceSaleStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelistClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_merkleproof",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256",
          "name": "allowedMintQuantity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mintQuantity",
          "type": "uint256"
        }
      ],
      "name": "wlPreSaleBuy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wlSaleEndTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wlSaleStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xbb62a200e57099e5753d7fafc1dc12655f743dcb72f47df0de55e4deeeffc4fb",
  "receipt": {
    "to": null,
    "from": "0x6957f309071c318149e4334138AFf00451D46d49",
    "contractAddress": "0x9a63964DeC87232b28670cfd8D5a788C6c988d28",
    "transactionIndex": 21,
    "gasUsed": "2512288",
    "logsBloom": "0x
    "blockHash": "0x4c49bef743e6f5bb1ef3774be558295728e4536a183b214c7ad3843453e149b0",
    "transactionHash": "0xbb62a200e57099e5753d7fafc1dc12655f743dcb72f47df0de55e4deeeffc4fb",
    "logs": [
      {
        "transactionIndex": 21,
        "blockNumber": 11010827,
        "transactionHash": "0xbb62a200e57099e5753d7fafc1dc12655f743dcb72f47df0de55e4deeeffc4fb",
        "address": "0x9a63964DeC87232b28670cfd8D5a788C6c988d28",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006957f309071c318149e4334138aff00451d46d49"
        ],
        "data": "0x",
        "logIndex": 50,
        "blockHash": "0x4c49bef743e6f5bb1ef3774be558295728e4536a183b214c7ad3843453e149b0"
      }
    ],
    "blockNumber": 11010827,
    "cumulativeGasUsed": "7562197",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "IMP",
    "IMP"
  ],
  "numDeployments": 1,
  "solcInputHash": "660f92e4f9d56d161e71a0b0b06011ed",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DirectMintFromContractNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedsAllocatedForFounders\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedsAllocatedForFreeSale\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedsAllocatedForPreSale\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedsCashierMaxSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedsFreeMaxSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedsPreSaleSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedsVipServiceMaxSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientETHSent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOnWhitelist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PublicSaleInactive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SaleInactive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawalFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingSupply\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CASHIER_SALE_MINT_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CASHIER_SALE_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FOUNDERS_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FREE_SALE_MINT_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FREE_SALE_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRE_SALE_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VIP_SERVICE_SALE_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseUriSuffix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cashierSaleAmountMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintQuantity\",\"type\":\"uint256\"}],\"name\":\"cashierSaleBuy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cashierSaleClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cashierSaleEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cashierSaleStartPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cashierSaleStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"foundersAmountMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintQuantity\",\"type\":\"uint256\"}],\"name\":\"foundersMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addressArr\",\"type\":\"address[]\"}],\"name\":\"foundersMintOneTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freeSaleAmountMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freeSaleBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"freeSaleClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freeSaleEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freeSaleStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRemainingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isWithinTimeOfCashier\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isWithinTimeOfFree\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isWithinTimeOfVipService\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isWithinTimeOfWl\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preSaleAmountMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"setCashierSaleTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"setFreeSaleTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"setVipServiceSaleTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"setWlSaleTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vipServiceSaleAmountMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintQuantity\",\"type\":\"uint256\"}],\"name\":\"vipServiceSaleBuy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vipServiceSaleStartPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vipServiceSaleStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_merkleproof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"allowedMintQuantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintQuantity\",\"type\":\"uint256\"}],\"name\":\"wlPreSaleBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wlSaleEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wlSaleStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IMP.sol\":\"IMP\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\\n     * consuming from one or the other at each step according to the instructions given by\\n     * `proofFlags`.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x596ed72a251d391b814a4aa19d7acb02ebdcc92ba27d3fff74a6f0c158b12ab7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/IMP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\r\\n\\r\\ncontract IMP is ERC721, Ownable, ReentrancyGuard {\\r\\n    using Strings for uint256;\\r\\n    using Counters for Counters.Counter;\\r\\n\\r\\n    string public baseURI;\\r\\n    string public baseUriSuffix = \\\".json\\\";\\r\\n\\r\\n    constructor(string memory _name, string memory _symbol) ERC721(_name, _symbol) {}\\r\\n\\r\\n    uint256 public constant MAX_SUPPLY = 10000;\\r\\n    uint256 public constant FOUNDERS_SUPPLY = 900;\\r\\n    uint256 public constant FREE_SALE_SUPPLY = 3000;\\r\\n    uint256 public constant PRE_SALE_SUPPLY = 1000;\\r\\n    uint256 public constant CASHIER_SALE_SUPPLY = 5000;\\r\\n    uint256 public constant VIP_SERVICE_SALE_SUPPLY = 100;\\r\\n\\r\\n    Counters.Counter public totalSupply;\\r\\n\\r\\n    // Founders\\r\\n    uint256 public foundersAmountMinted;\\r\\n\\r\\n    // WL MINT\\r\\n    uint256 public wlSaleStartTime;\\r\\n    uint256 public wlSaleEndTime;\\r\\n    mapping(address => uint256) public whitelistClaimed;\\r\\n    bytes32 private merkleRoot;\\r\\n    uint256 public preSaleAmountMinted;\\r\\n\\r\\n    //FREE MINT\\r\\n    uint256 public freeSaleStartTime;\\r\\n    uint256 public freeSaleEndTime;\\r\\n    uint256 public freeSaleAmountMinted;\\r\\n    mapping(address => uint256) public freeSaleClaimed;\\r\\n    uint256 public constant FREE_SALE_MINT_LIMIT = 1;\\r\\n\\r\\n    //CASHIER\\r\\n    uint256 public cashierSaleStartTime;\\r\\n    uint256 public cashierSaleEndTime;\\r\\n    uint256 public cashierSaleAmountMinted;\\r\\n    mapping(address => uint256) public cashierSaleClaimed;\\r\\n    uint256 public cashierSaleStartPrice = 0.05 ether;\\r\\n    uint256 public constant CASHIER_SALE_MINT_LIMIT = 2;\\r\\n\\r\\n    //VIP SERVICE\\r\\n    uint256 public vipServiceSaleStartTime;\\r\\n    uint256 public vipServiceSaleAmountMinted;\\r\\n    uint256 public vipServiceSaleStartPrice = 1 ether;\\r\\n\\r\\n    error DirectMintFromContractNotAllowed();\\r\\n    error PublicSaleInactive();\\r\\n    error ExceedsCashierMaxSupply();\\r\\n    error ExceedsFreeMaxSupply();\\r\\n    error ExceedsVipServiceMaxSupply();\\r\\n    error ExceedsAllocatedForFreeSale();\\r\\n    error WithdrawalFailed();\\r\\n    error ExceedsAllocatedForFounders();\\r\\n    error SaleInactive();\\r\\n    error InsufficientETHSent();\\r\\n    error NotOnWhitelist();\\r\\n    error ExceedsPreSaleSupply();\\r\\n    error ExceedsAllocatedForPreSale();\\r\\n\\r\\n    event Minted(uint256 remainingSupply);\\r\\n\\r\\n    modifier callerIsUser() {\\r\\n        if (tx.origin != msg.sender) revert DirectMintFromContractNotAllowed();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function getRemainingSupply() public view returns (uint256) {\\r\\n        unchecked {\\r\\n            return MAX_SUPPLY - totalSupply.current();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function wlPreSaleBuy(\\r\\n        bytes32[] memory _merkleproof,\\r\\n        uint256 allowedMintQuantity,\\r\\n        uint256 mintQuantity\\r\\n    ) external nonReentrant callerIsUser {\\r\\n        if (!isWithinTimeOfWl()) revert SaleInactive();\\r\\n\\r\\n        if (preSaleAmountMinted + mintQuantity > PRE_SALE_SUPPLY) revert ExceedsPreSaleSupply();\\r\\n\\r\\n        if (whitelistClaimed[msg.sender] + mintQuantity > allowedMintQuantity)\\r\\n            revert ExceedsAllocatedForPreSale();\\r\\n\\r\\n        bytes32 leaf = keccak256(abi.encodePacked(msg.sender, allowedMintQuantity));\\r\\n        if (!MerkleProof.verify(_merkleproof, merkleRoot, leaf)) revert NotOnWhitelist();\\r\\n\\r\\n        unchecked {\\r\\n            preSaleAmountMinted += mintQuantity;\\r\\n            whitelistClaimed[msg.sender] += mintQuantity;\\r\\n        }\\r\\n\\r\\n        for (uint256 i; i < mintQuantity; ) {\\r\\n            totalSupply.increment();\\r\\n            _mint(msg.sender, totalSupply.current());\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit Minted(getRemainingSupply());\\r\\n    }\\r\\n\\r\\n    function freeSaleBuy() external nonReentrant callerIsUser {\\r\\n        if (!isWithinTimeOfFree()) revert SaleInactive();\\r\\n\\r\\n        if (freeSaleAmountMinted + 1 > FREE_SALE_SUPPLY) revert ExceedsFreeMaxSupply();\\r\\n\\r\\n        if (freeSaleClaimed[msg.sender] + 1 > FREE_SALE_MINT_LIMIT)\\r\\n            revert ExceedsAllocatedForFreeSale();\\r\\n\\r\\n        unchecked {\\r\\n            freeSaleAmountMinted += 1;\\r\\n            freeSaleClaimed[msg.sender] += 1;\\r\\n        }\\r\\n\\r\\n        totalSupply.increment();\\r\\n        _mint(msg.sender, totalSupply.current());\\r\\n\\r\\n        emit Minted(getRemainingSupply());\\r\\n    }\\r\\n\\r\\n    function cashierSaleBuy(uint256 mintQuantity) external payable nonReentrant callerIsUser {\\r\\n        if (!isWithinTimeOfCashier()) revert SaleInactive();\\r\\n\\r\\n        if (cashierSaleAmountMinted + mintQuantity > CASHIER_SALE_MINT_LIMIT)\\r\\n            revert ExceedsCashierMaxSupply();\\r\\n\\r\\n        if (cashierSaleClaimed[msg.sender] + mintQuantity > CASHIER_SALE_MINT_LIMIT)\\r\\n            revert ExceedsAllocatedForFreeSale();\\r\\n\\r\\n        if (msg.value < cashierSaleStartPrice * mintQuantity) revert InsufficientETHSent();\\r\\n\\r\\n        unchecked {\\r\\n            cashierSaleAmountMinted += mintQuantity;\\r\\n            cashierSaleClaimed[msg.sender] += mintQuantity;\\r\\n        }\\r\\n\\r\\n        for (uint256 i; i < mintQuantity; ) {\\r\\n            totalSupply.increment();\\r\\n            _mint(msg.sender, totalSupply.current());\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n        emit Minted(getRemainingSupply());\\r\\n    }\\r\\n\\r\\n    function vipServiceSaleBuy(uint256 mintQuantity) external payable nonReentrant callerIsUser {\\r\\n        if (!isWithinTimeOfVipService()) revert SaleInactive();\\r\\n\\r\\n        if (vipServiceSaleAmountMinted + mintQuantity > VIP_SERVICE_SALE_SUPPLY)\\r\\n            revert ExceedsVipServiceMaxSupply();\\r\\n\\r\\n        if (msg.value < vipServiceSaleStartPrice * mintQuantity) revert InsufficientETHSent();\\r\\n\\r\\n        unchecked {\\r\\n            vipServiceSaleAmountMinted += mintQuantity;\\r\\n        }\\r\\n\\r\\n        for (uint256 i; i < mintQuantity; ) {\\r\\n            totalSupply.increment();\\r\\n            _mint(msg.sender, totalSupply.current());\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n        emit Minted(getRemainingSupply());\\r\\n    }\\r\\n\\r\\n    function foundersMint(uint256 mintQuantity) external onlyOwner nonReentrant {\\r\\n        if (foundersAmountMinted + mintQuantity > FOUNDERS_SUPPLY)\\r\\n            revert ExceedsAllocatedForFounders();\\r\\n\\r\\n        for (uint256 i; i < mintQuantity; ) {\\r\\n            totalSupply.increment();\\r\\n            _mint(msg.sender, totalSupply.current());\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        unchecked {\\r\\n            foundersAmountMinted += mintQuantity;\\r\\n        }\\r\\n\\r\\n        emit Minted(getRemainingSupply());\\r\\n    }\\r\\n\\r\\n    function foundersMintOneTo(address[] calldata addressArr) external onlyOwner nonReentrant {\\r\\n        if (foundersAmountMinted + addressArr.length > FOUNDERS_SUPPLY)\\r\\n            revert ExceedsAllocatedForFounders();\\r\\n\\r\\n        for (uint256 i; i < addressArr.length; ) {\\r\\n            totalSupply.increment();\\r\\n            _mint(addressArr[i], totalSupply.current());\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        unchecked {\\r\\n            foundersAmountMinted += addressArr.length;\\r\\n        }\\r\\n        emit Minted(getRemainingSupply());\\r\\n    }\\r\\n\\r\\n    function withdraw() external onlyOwner nonReentrant {\\r\\n        (bool success, ) = payable(msg.sender).call{ value: address(this).balance }(\\\"\\\");\\r\\n\\r\\n        if (!success) revert WithdrawalFailed();\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\r\\n        _requireMinted(tokenId);\\r\\n        string memory currentBaseURI = _baseURI();\\r\\n        return\\r\\n            bytes(currentBaseURI).length > 0\\r\\n                ? string(abi.encodePacked(currentBaseURI, tokenId.toString(), baseUriSuffix))\\r\\n                : \\\"\\\";\\r\\n    }\\r\\n\\r\\n    function isWithinTimeOfWl() public view returns (bool) {\\r\\n        return block.timestamp < wlSaleEndTime && block.timestamp >= wlSaleStartTime;\\r\\n    }\\r\\n\\r\\n    function isWithinTimeOfFree() public view returns (bool) {\\r\\n        return block.timestamp < freeSaleEndTime && block.timestamp >= freeSaleStartTime;\\r\\n    }\\r\\n\\r\\n    function isWithinTimeOfCashier() public view returns (bool) {\\r\\n        return block.timestamp < cashierSaleEndTime && block.timestamp >= cashierSaleStartTime;\\r\\n    }\\r\\n\\r\\n    function isWithinTimeOfVipService() public view returns (bool) {\\r\\n        return vipServiceSaleStartTime > 0 && block.timestamp >= vipServiceSaleStartTime;\\r\\n    }\\r\\n\\r\\n    function _baseURI() internal view override returns (string memory) {\\r\\n        return baseURI;\\r\\n    }\\r\\n\\r\\n    function setBaseURI(string calldata _uri) external onlyOwner {\\r\\n        baseURI = _uri;\\r\\n    }\\r\\n\\r\\n    function setWlSaleTime(uint256 _startTime, uint256 _endTime) external onlyOwner {\\r\\n        wlSaleStartTime = _startTime;\\r\\n        wlSaleEndTime = _endTime;\\r\\n    }\\r\\n\\r\\n    function setFreeSaleTime(uint256 _startTime, uint256 _endTime) external onlyOwner {\\r\\n        freeSaleStartTime = _startTime;\\r\\n        freeSaleEndTime = _endTime;\\r\\n    }\\r\\n\\r\\n    function setCashierSaleTime(uint256 _startTime, uint256 _endTime) external onlyOwner {\\r\\n        cashierSaleStartTime = _startTime;\\r\\n        cashierSaleEndTime = _endTime;\\r\\n    }\\r\\n\\r\\n    function setVipServiceSaleTime(uint256 _startTime) external onlyOwner {\\r\\n        vipServiceSaleStartTime = _startTime;\\r\\n    }\\r\\n\\r\\n    function setMerkleRoot(bytes32 _merkleRoot) external onlyOwner {\\r\\n        merkleRoot = _merkleRoot;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1822ac438988c8dd535305d714e2b5e91b72129a9ec0c02f825a85b3151d3d1e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040526005608081905264173539b7b760d91b60a09081526200002891600991906200011f565b5066b1a2bc2ec50000601955670de0b6b3a7640000601c553480156200004d57600080fd5b5060405162002ca138038062002ca1833981016040819052620000709162000278565b815182908290620000899060009060208501906200011f565b5080516200009f9060019060208401906200011f565b505050620000bc620000b6620000c960201b60201c565b620000cd565b5050600160075562000332565b3390565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8280546200012d90620002df565b90600052602060002090601f0160209004810192826200015157600085556200019c565b82601f106200016c57805160ff19168380011785556200019c565b828001600101855582156200019c579182015b828111156200019c5782518255916020019190600101906200017f565b50620001aa929150620001ae565b5090565b5b80821115620001aa5760008155600101620001af565b600082601f830112620001d6578081fd5b81516001600160401b0380821115620001f357620001f36200031c565b604051601f8301601f19908116603f011681019082821181831017156200021e576200021e6200031c565b816040528381526020925086838588010111156200023a578485fd5b8491505b838210156200025d57858201830151818301840152908201906200023e565b838211156200026e57848385830101525b9695505050505050565b600080604083850312156200028b578182fd5b82516001600160401b0380821115620002a2578384fd5b620002b086838701620001c5565b93506020850151915080821115620002c6578283fd5b50620002d585828601620001c5565b9150509250929050565b600181811c90821680620002f457607f821691505b602082108114156200031657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b61295f80620003426000396000f3fe6080604052600436106103ad5760003560e01c806370a08231116101e7578063c87b56dd1161010d578063e4b7fb73116100a0578063f2fde38b1161006f578063f2fde38b14610a24578063f62e926014610a44578063fafe1aa814610a5a578063fd2449fb14610a6f57600080fd5b8063e4b7fb7314610991578063e73735d0146109a6578063e985e9c5146109c6578063eb0c3c8d14610a0f57600080fd5b8063db4bec44116100dc578063db4bec4414610923578063dbee0b2f14610950578063dece9b2714610966578063e09b0f1e1461097b57600080fd5b8063c87b56dd146108aa578063c885e1a8146108ca578063cd769df2146108e0578063d0864c96146108f657600080fd5b806395602a12116101855780639b2b6a41116101545780639b2b6a411461081d578063a22cb4651461084a578063b88d4fde1461086a578063bbd89a941461088a57600080fd5b806395602a12146107c757806395d89b41146107dc578063974bcaab146107f157806398ca667f1461080757600080fd5b8063863eb020116101c1578063863eb0201461076b578063879f1b82146107805780638da5cb5b146107935780638e0c09b2146107b157600080fd5b806370a0823114610716578063715018a6146107365780637cb647591461074b57600080fd5b8063424d16da116102d757806353867b4c1161026a578063629403f511610239578063629403f5146106b55780636352211e146106cb5780636c0360eb146106eb578063702377181461070057600080fd5b806353867b4c14610655578063540075b41461066a578063553747b11461068057806355f804b31461069557600080fd5b806344ee0aa8116102a657806344ee0aa8146105f457806345ea45e1146106095780634619fd101461061f578063491a39fa1461063f57600080fd5b8063424d16da1461058b57806342842e0e146105a157806342e07194146105c157806344de95b0146105e157600080fd5b8063198c6f121161034f578063309bd4c31161031e578063309bd4c31461052a57806332cb6b0c1461054057806332f324c5146105565780633ccfd60b1461057657600080fd5b8063198c6f12146104be57806323b872dd146104de5780632567cb84146104fe5780632e66d2bb1461051457600080fd5b8063070351291161038b578063070351291461042d578063081812fc1461044f578063095ea7b31461048757806318160ddd146104a757600080fd5b806301ffc9a7146103b2578063021fa000146103e757806306fdde031461040b575b600080fd5b3480156103be57600080fd5b506103d26103cd3660046124bf565b610a84565b60405190151581526020015b60405180910390f35b3480156103f357600080fd5b506103fd60135481565b6040519081526020016103de565b34801561041757600080fd5b50610420610ad6565b6040516103de919061269e565b34801561043957600080fd5b5061044d6104483660046123ef565b610b68565b005b34801561045b57600080fd5b5061046f61046a3660046124a7565b610d36565b6040516001600160a01b0390911681526020016103de565b34801561049357600080fd5b5061044d6104a2366004612356565b610d5d565b3480156104b357600080fd5b50600a546103fd9081565b3480156104ca57600080fd5b5061044d6104d9366004612552565b610e73565b3480156104ea57600080fd5b5061044d6104f9366004612229565b610e86565b34801561050a57600080fd5b506103fd60115481565b34801561052057600080fd5b506103fd610bb881565b34801561053657600080fd5b506103fd601c5481565b34801561054c57600080fd5b506103fd61271081565b34801561056257600080fd5b5061044d6105713660046124a7565b610eb7565b34801561058257600080fd5b5061044d610ec4565b34801561059757600080fd5b506103fd60155481565b3480156105ad57600080fd5b5061044d6105bc366004612229565b610f65565b3480156105cd57600080fd5b5061044d6105dc366004612552565b610f80565b61044d6105ef3660046124a7565b610f93565b34801561060057600080fd5b506103d2611114565b34801561061557600080fd5b506103fd600c5481565b34801561062b57600080fd5b5061044d61063a3660046124a7565b61112e565b34801561064b57600080fd5b506103fd601a5481565b34801561066157600080fd5b506103fd600181565b34801561067657600080fd5b506103fd600b5481565b34801561068c57600080fd5b506103fd606481565b3480156106a157600080fd5b5061044d6106b03660046124f7565b6111dd565b3480156106c157600080fd5b506103fd600d5481565b3480156106d757600080fd5b5061046f6106e63660046124a7565b6111f1565b3480156106f757600080fd5b50610420611251565b34801561070c57600080fd5b506103fd60105481565b34801561072257600080fd5b506103fd6107313660046121dd565b6112df565b34801561074257600080fd5b5061044d611365565b34801561075757600080fd5b5061044d6107663660046124a7565b611379565b34801561077757600080fd5b506103d2611386565b61044d61078e3660046124a7565b61139e565b34801561079f57600080fd5b506006546001600160a01b031661046f565b3480156107bd57600080fd5b506103fd6103e881565b3480156107d357600080fd5b506103fd600281565b3480156107e857600080fd5b5061042061149e565b3480156107fd57600080fd5b506103fd601b5481565b34801561081357600080fd5b506103fd61038481565b34801561082957600080fd5b506103fd6108383660046121dd565b60146020526000908152604090205481565b34801561085657600080fd5b5061044d61086536600461231c565b6114ad565b34801561087657600080fd5b5061044d610885366004612264565b6114bc565b34801561089657600080fd5b5061044d6108a536600461237f565b6114f4565b3480156108b657600080fd5b506104206108c53660046124a7565b6115f0565b3480156108d657600080fd5b506103fd60125481565b3480156108ec57600080fd5b506103fd61138881565b34801561090257600080fd5b506103fd6109113660046121dd565b60186020526000908152604090205481565b34801561092f57600080fd5b506103fd61093e3660046121dd565b600e6020526000908152604090205481565b34801561095c57600080fd5b506103fd60195481565b34801561097257600080fd5b5061044d61165a565b34801561098757600080fd5b506103fd60175481565b34801561099d57600080fd5b506103fd6117a0565b3480156109b257600080fd5b5061044d6109c1366004612552565b6117b4565b3480156109d257600080fd5b506103d26109e13660046121f7565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b348015610a1b57600080fd5b506103d26117c7565b348015610a3057600080fd5b5061044d610a3f3660046121dd565b6117df565b348015610a5057600080fd5b506103fd60165481565b348015610a6657600080fd5b50610420611858565b348015610a7b57600080fd5b506103d2611865565b60006001600160e01b031982166380ac58cd60e01b1480610ab557506001600160e01b03198216635b5e139f60e01b145b80610ad057506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060008054610ae590612847565b80601f0160208091040260200160405190810160405280929190818152602001828054610b1190612847565b8015610b5e5780601f10610b3357610100808354040283529160200191610b5e565b820191906000526020600020905b815481529060010190602001808311610b4157829003601f168201915b5050505050905090565b60026007541415610b945760405162461bcd60e51b8152600401610b8b90612751565b60405180910390fd5b6002600755323314610bb957604051633458477760e01b815260040160405180910390fd5b610bc16117c7565b610bde57604051630fe219dd60e21b815260040160405180910390fd5b6103e881601054610bef91906127b9565b1115610c0e57604051637e53eae760e11b815260040160405180910390fd5b336000908152600e60205260409020548290610c2b9083906127b9565b1115610c4a57604051631289a7bb60e11b815260040160405180910390fd5b6040516bffffffffffffffffffffffff193360601b16602082015260348101839052600090605401604051602081830303815290604052805190602001209050610c9784600f548361187d565b610cb45760405163522fc3bd60e01b815260040160405180910390fd5b6010805483019055336000908152600e602052604081208054840190555b82811015610d0257610ce8600a80546001019055565b610cfa33610cf5600a5490565b611893565b600101610cd2565b5060008051602061290a833981519152610d1a6117a0565b60405190815260200160405180910390a1505060016007555050565b6000610d41826119d5565b506000908152600460205260409020546001600160a01b031690565b6000610d68826111f1565b9050806001600160a01b0316836001600160a01b03161415610dd65760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610b8b565b336001600160a01b0382161480610df25750610df281336109e1565b610e645760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c00006064820152608401610b8b565b610e6e8383611a34565b505050565b610e7b611aa2565b601591909155601655565b610e903382611afc565b610eac5760405162461bcd60e51b8152600401610b8b90612703565b610e6e838383611b7b565b610ebf611aa2565b601a55565b610ecc611aa2565b60026007541415610eef5760405162461bcd60e51b8152600401610b8b90612751565b6002600755604051600090339047908381818185875af1925050503d8060008114610f36576040519150601f19603f3d011682016040523d82523d6000602084013e610f3b565b606091505b5050905080610f5d576040516327fcd9d160e01b815260040160405180910390fd5b506001600755565b610e6e838383604051806020016040528060008152506114bc565b610f88611aa2565b601191909155601255565b60026007541415610fb65760405162461bcd60e51b8152600401610b8b90612751565b6002600755323314610fdb57604051633458477760e01b815260040160405180910390fd5b610fe3611865565b61100057604051630fe219dd60e21b815260040160405180910390fd5b60028160175461101091906127b9565b111561102f57604051631001fccd60e01b815260040160405180910390fd5b3360009081526018602052604090205460029061104d9083906127b9565b111561106c5760405163e222758f60e01b815260040160405180910390fd5b8060195461107a91906127e5565b34101561109a5760405163311c9fd160e01b815260040160405180910390fd5b60178054820190553360009081526018602052604081208054830190555b818110156110e3576110ce600a80546001019055565b6110db33610cf5600a5490565b6001016110b8565b5060008051602061290a8339815191526110fb6117a0565b60405190815260200160405180910390a1506001600755565b600080601a541180156111295750601a544210155b905090565b611136611aa2565b600260075414156111595760405162461bcd60e51b8152600401610b8b90612751565b6002600755600b54610384906111709083906127b9565b111561118f57604051632a3b0a3360e11b815260040160405180910390fd5b60005b818110156111bd576111a8600a80546001019055565b6111b533610cf5600a5490565b600101611192565b50600b80548201905560008051602061290a8339815191526110fb6117a0565b6111e5611aa2565b610e6e60088383612128565b6000818152600260205260408120546001600160a01b031680610ad05760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610b8b565b6008805461125e90612847565b80601f016020809104026020016040519081016040528092919081815260200182805461128a90612847565b80156112d75780601f106112ac576101008083540402835291602001916112d7565b820191906000526020600020905b8154815290600101906020018083116112ba57829003601f168201915b505050505081565b60006001600160a01b0382166113495760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610b8b565b506001600160a01b031660009081526003602052604090205490565b61136d611aa2565b6113776000611d17565b565b611381611aa2565b600f55565b60006012544210801561112957505060115442101590565b600260075414156113c15760405162461bcd60e51b8152600401610b8b90612751565b60026007553233146113e657604051633458477760e01b815260040160405180910390fd5b6113ee611114565b61140b57604051630fe219dd60e21b815260040160405180910390fd5b606481601b5461141b91906127b9565b111561143a57604051636061bfff60e11b815260040160405180910390fd5b80601c5461144891906127e5565b3410156114685760405163311c9fd160e01b815260040160405180910390fd5b601b80548201905560005b818110156110e357611489600a80546001019055565b61149633610cf5600a5490565b600101611473565b606060018054610ae590612847565b6114b8338383611d69565b5050565b6114c63383611afc565b6114e25760405162461bcd60e51b8152600401610b8b90612703565b6114ee84848484611e38565b50505050565b6114fc611aa2565b6002600754141561151f5760405162461bcd60e51b8152600401610b8b90612751565b6002600755600b54610384906115369083906127b9565b111561155557604051632a3b0a3360e11b815260040160405180910390fd5b60005b818110156115b65761156e600a80546001019055565b6115ae83838381811061159157634e487b7160e01b600052603260045260246000fd5b90506020020160208101906115a691906121dd565b600a54611893565b600101611558565b50600b80548201905560008051602061290a8339815191526115d66117a0565b60405190815260200160405180910390a150506001600755565b60606115fb826119d5565b6000611605611e6b565b905060008151116116255760405180602001604052806000815250611653565b8061162f84611e7a565b60096040516020016116439392919061259f565b6040516020818303038152906040525b9392505050565b6002600754141561167d5760405162461bcd60e51b8152600401610b8b90612751565b60026007553233146116a257604051633458477760e01b815260040160405180910390fd5b6116aa611386565b6116c757604051630fe219dd60e21b815260040160405180910390fd5b610bb860135460016116d991906127b9565b11156116f8576040516328a6a5c560e21b815260040160405180910390fd5b3360009081526014602052604090205460019061171590826127b9565b11156117345760405163e222758f60e01b815260040160405180910390fd5b60138054600190810190915533600090815260146020526040902080549091019055611764600a80546001019055565b61177133610cf5600a5490565b60008051602061290a8339815191526117886117a0565b60405190815260200160405180910390a16001600755565b60006117ab600a5490565b61271003905090565b6117bc611aa2565b600c91909155600d55565b6000600d5442108015611129575050600c5442101590565b6117e7611aa2565b6001600160a01b03811661184c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610b8b565b61185581611d17565b50565b6009805461125e90612847565b60006016544210801561112957505060155442101590565b60008261188a8584611f94565b14949350505050565b6001600160a01b0382166118e95760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610b8b565b6000818152600260205260409020546001600160a01b03161561194e5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610b8b565b6001600160a01b03821660009081526003602052604081208054600192906119779084906127b9565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000818152600260205260409020546001600160a01b03166118555760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610b8b565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611a69826111f1565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6006546001600160a01b031633146113775760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b8b565b600080611b08836111f1565b9050806001600160a01b0316846001600160a01b03161480611b4f57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b80611b735750836001600160a01b0316611b6884610d36565b6001600160a01b0316145b949350505050565b826001600160a01b0316611b8e826111f1565b6001600160a01b031614611bf25760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610b8b565b6001600160a01b038216611c545760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610b8b565b611c5f600082611a34565b6001600160a01b0383166000908152600360205260408120805460019290611c88908490612804565b90915550506001600160a01b0382166000908152600360205260408120805460019290611cb69084906127b9565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b03161415611dcb5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610b8b565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611e43848484611b7b565b611e4f84848484611fef565b6114ee5760405162461bcd60e51b8152600401610b8b906126b1565b606060088054610ae590612847565b606081611e9e5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611ec85780611eb281612882565b9150611ec19050600a836127d1565b9150611ea2565b60008167ffffffffffffffff811115611ef157634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611f1b576020820181803683370190505b5090505b8415611b7357611f30600183612804565b9150611f3d600a8661289d565b611f489060306127b9565b60f81b818381518110611f6b57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350611f8d600a866127d1565b9450611f1f565b600081815b8451811015611fe757611fd382868381518110611fc657634e487b7160e01b600052603260045260246000fd5b60200260200101516120fc565b915080611fdf81612882565b915050611f99565b509392505050565b60006001600160a01b0384163b156120f157604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612033903390899088908890600401612661565b602060405180830381600087803b15801561204d57600080fd5b505af192505050801561207d575060408051601f3d908101601f1916820190925261207a918101906124db565b60015b6120d7573d8080156120ab576040519150601f19603f3d011682016040523d82523d6000602084013e6120b0565b606091505b5080516120cf5760405162461bcd60e51b8152600401610b8b906126b1565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611b73565b506001949350505050565b6000818310612118576000828152602084905260409020611653565b5060009182526020526040902090565b82805461213490612847565b90600052602060002090601f016020900481019282612156576000855561219c565b82601f1061216f5782800160ff1982351617855561219c565b8280016001018555821561219c579182015b8281111561219c578235825591602001919060010190612181565b506121a89291506121ac565b5090565b5b808211156121a857600081556001016121ad565b80356001600160a01b03811681146121d857600080fd5b919050565b6000602082840312156121ee578081fd5b611653826121c1565b60008060408385031215612209578081fd5b612212836121c1565b9150612220602084016121c1565b90509250929050565b60008060006060848603121561223d578081fd5b612246846121c1565b9250612254602085016121c1565b9150604084013590509250925092565b60008060008060808587031215612279578081fd5b612282856121c1565b935060206122918187016121c1565b935060408601359250606086013567ffffffffffffffff808211156122b4578384fd5b818801915088601f8301126122c7578384fd5b8135818111156122d9576122d96128dd565b6122eb601f8201601f19168501612788565b91508082528984828501011115612300578485fd5b8084840185840137810190920192909252939692955090935050565b6000806040838503121561232e578182fd5b612337836121c1565b91506020830135801515811461234b578182fd5b809150509250929050565b60008060408385031215612368578182fd5b612371836121c1565b946020939093013593505050565b60008060208385031215612391578182fd5b823567ffffffffffffffff808211156123a8578384fd5b818501915085601f8301126123bb578384fd5b8135818111156123c9578485fd5b8660208260051b85010111156123dd578485fd5b60209290920196919550909350505050565b600080600060608486031215612403578283fd5b833567ffffffffffffffff8082111561241a578485fd5b818601915086601f83011261242d578485fd5b8135602082821115612441576124416128dd565b8160051b9250612452818401612788565b8281528181019085830185870184018c101561246c57898afd5b8996505b8487101561248e578035835260019690960195918301918301612470565b509a918901359950506040909701359695505050505050565b6000602082840312156124b8578081fd5b5035919050565b6000602082840312156124d0578081fd5b8135611653816128f3565b6000602082840312156124ec578081fd5b8151611653816128f3565b60008060208385031215612509578081fd5b823567ffffffffffffffff80821115612520578283fd5b818501915085601f830112612533578283fd5b813581811115612541578384fd5b8660208285010111156123dd578384fd5b60008060408385031215612564578182fd5b50508035926020909101359150565b6000815180845261258b81602086016020860161281b565b601f01601f19169290920160200192915050565b6000845160206125b28285838a0161281b565b8551918401916125c58184848a0161281b565b85549201918390600181811c90808316806125e157607f831692505b8583108114156125ff57634e487b7160e01b88526022600452602488fd5b808015612613576001811461262457612650565b60ff19851688528388019550612650565b60008b815260209020895b858110156126485781548a82015290840190880161262f565b505083880195505b50939b9a5050505050505050505050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061269490830184612573565b9695505050505050565b6020815260006116536020830184612573565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b604051601f8201601f1916810167ffffffffffffffff811182821017156127b1576127b16128dd565b604052919050565b600082198211156127cc576127cc6128b1565b500190565b6000826127e0576127e06128c7565b500490565b60008160001904831182151516156127ff576127ff6128b1565b500290565b600082821015612816576128166128b1565b500390565b60005b8381101561283657818101518382015260200161281e565b838111156114ee5750506000910152565b600181811c9082168061285b57607f821691505b6020821081141561287c57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415612896576128966128b1565b5060010190565b6000826128ac576128ac6128c7565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b03198116811461185557600080fdfe176b02bb2d12439ff7a20b59f402cca16c76f50508b13ef3166a600eb719354aa26469706673582212203b5fb30173501e6070d1ef7bff8bc2b94fd7c93b28e8a3bad33d754ff354c0bd64736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106103ad5760003560e01c806370a08231116101e7578063c87b56dd1161010d578063e4b7fb73116100a0578063f2fde38b1161006f578063f2fde38b14610a24578063f62e926014610a44578063fafe1aa814610a5a578063fd2449fb14610a6f57600080fd5b8063e4b7fb7314610991578063e73735d0146109a6578063e985e9c5146109c6578063eb0c3c8d14610a0f57600080fd5b8063db4bec44116100dc578063db4bec4414610923578063dbee0b2f14610950578063dece9b2714610966578063e09b0f1e1461097b57600080fd5b8063c87b56dd146108aa578063c885e1a8146108ca578063cd769df2146108e0578063d0864c96146108f657600080fd5b806395602a12116101855780639b2b6a41116101545780639b2b6a411461081d578063a22cb4651461084a578063b88d4fde1461086a578063bbd89a941461088a57600080fd5b806395602a12146107c757806395d89b41146107dc578063974bcaab146107f157806398ca667f1461080757600080fd5b8063863eb020116101c1578063863eb0201461076b578063879f1b82146107805780638da5cb5b146107935780638e0c09b2146107b157600080fd5b806370a0823114610716578063715018a6146107365780637cb647591461074b57600080fd5b8063424d16da116102d757806353867b4c1161026a578063629403f511610239578063629403f5146106b55780636352211e146106cb5780636c0360eb146106eb578063702377181461070057600080fd5b806353867b4c14610655578063540075b41461066a578063553747b11461068057806355f804b31461069557600080fd5b806344ee0aa8116102a657806344ee0aa8146105f457806345ea45e1146106095780634619fd101461061f578063491a39fa1461063f57600080fd5b8063424d16da1461058b57806342842e0e146105a157806342e07194146105c157806344de95b0146105e157600080fd5b8063198c6f121161034f578063309bd4c31161031e578063309bd4c31461052a57806332cb6b0c1461054057806332f324c5146105565780633ccfd60b1461057657600080fd5b8063198c6f12146104be57806323b872dd146104de5780632567cb84146104fe5780632e66d2bb1461051457600080fd5b8063070351291161038b578063070351291461042d578063081812fc1461044f578063095ea7b31461048757806318160ddd146104a757600080fd5b806301ffc9a7146103b2578063021fa000146103e757806306fdde031461040b575b600080fd5b3480156103be57600080fd5b506103d26103cd3660046124bf565b610a84565b60405190151581526020015b60405180910390f35b3480156103f357600080fd5b506103fd60135481565b6040519081526020016103de565b34801561041757600080fd5b50610420610ad6565b6040516103de919061269e565b34801561043957600080fd5b5061044d6104483660046123ef565b610b68565b005b34801561045b57600080fd5b5061046f61046a3660046124a7565b610d36565b6040516001600160a01b0390911681526020016103de565b34801561049357600080fd5b5061044d6104a2366004612356565b610d5d565b3480156104b357600080fd5b50600a546103fd9081565b3480156104ca57600080fd5b5061044d6104d9366004612552565b610e73565b3480156104ea57600080fd5b5061044d6104f9366004612229565b610e86565b34801561050a57600080fd5b506103fd60115481565b34801561052057600080fd5b506103fd610bb881565b34801561053657600080fd5b506103fd601c5481565b34801561054c57600080fd5b506103fd61271081565b34801561056257600080fd5b5061044d6105713660046124a7565b610eb7565b34801561058257600080fd5b5061044d610ec4565b34801561059757600080fd5b506103fd60155481565b3480156105ad57600080fd5b5061044d6105bc366004612229565b610f65565b3480156105cd57600080fd5b5061044d6105dc366004612552565b610f80565b61044d6105ef3660046124a7565b610f93565b34801561060057600080fd5b506103d2611114565b34801561061557600080fd5b506103fd600c5481565b34801561062b57600080fd5b5061044d61063a3660046124a7565b61112e565b34801561064b57600080fd5b506103fd601a5481565b34801561066157600080fd5b506103fd600181565b34801561067657600080fd5b506103fd600b5481565b34801561068c57600080fd5b506103fd606481565b3480156106a157600080fd5b5061044d6106b03660046124f7565b6111dd565b3480156106c157600080fd5b506103fd600d5481565b3480156106d757600080fd5b5061046f6106e63660046124a7565b6111f1565b3480156106f757600080fd5b50610420611251565b34801561070c57600080fd5b506103fd60105481565b34801561072257600080fd5b506103fd6107313660046121dd565b6112df565b34801561074257600080fd5b5061044d611365565b34801561075757600080fd5b5061044d6107663660046124a7565b611379565b34801561077757600080fd5b506103d2611386565b61044d61078e3660046124a7565b61139e565b34801561079f57600080fd5b506006546001600160a01b031661046f565b3480156107bd57600080fd5b506103fd6103e881565b3480156107d357600080fd5b506103fd600281565b3480156107e857600080fd5b5061042061149e565b3480156107fd57600080fd5b506103fd601b5481565b34801561081357600080fd5b506103fd61038481565b34801561082957600080fd5b506103fd6108383660046121dd565b60146020526000908152604090205481565b34801561085657600080fd5b5061044d61086536600461231c565b6114ad565b34801561087657600080fd5b5061044d610885366004612264565b6114bc565b34801561089657600080fd5b5061044d6108a536600461237f565b6114f4565b3480156108b657600080fd5b506104206108c53660046124a7565b6115f0565b3480156108d657600080fd5b506103fd60125481565b3480156108ec57600080fd5b506103fd61138881565b34801561090257600080fd5b506103fd6109113660046121dd565b60186020526000908152604090205481565b34801561092f57600080fd5b506103fd61093e3660046121dd565b600e6020526000908152604090205481565b34801561095c57600080fd5b506103fd60195481565b34801561097257600080fd5b5061044d61165a565b34801561098757600080fd5b506103fd60175481565b34801561099d57600080fd5b506103fd6117a0565b3480156109b257600080fd5b5061044d6109c1366004612552565b6117b4565b3480156109d257600080fd5b506103d26109e13660046121f7565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b348015610a1b57600080fd5b506103d26117c7565b348015610a3057600080fd5b5061044d610a3f3660046121dd565b6117df565b348015610a5057600080fd5b506103fd60165481565b348015610a6657600080fd5b50610420611858565b348015610a7b57600080fd5b506103d2611865565b60006001600160e01b031982166380ac58cd60e01b1480610ab557506001600160e01b03198216635b5e139f60e01b145b80610ad057506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060008054610ae590612847565b80601f0160208091040260200160405190810160405280929190818152602001828054610b1190612847565b8015610b5e5780601f10610b3357610100808354040283529160200191610b5e565b820191906000526020600020905b815481529060010190602001808311610b4157829003601f168201915b5050505050905090565b60026007541415610b945760405162461bcd60e51b8152600401610b8b90612751565b60405180910390fd5b6002600755323314610bb957604051633458477760e01b815260040160405180910390fd5b610bc16117c7565b610bde57604051630fe219dd60e21b815260040160405180910390fd5b6103e881601054610bef91906127b9565b1115610c0e57604051637e53eae760e11b815260040160405180910390fd5b336000908152600e60205260409020548290610c2b9083906127b9565b1115610c4a57604051631289a7bb60e11b815260040160405180910390fd5b6040516bffffffffffffffffffffffff193360601b16602082015260348101839052600090605401604051602081830303815290604052805190602001209050610c9784600f548361187d565b610cb45760405163522fc3bd60e01b815260040160405180910390fd5b6010805483019055336000908152600e602052604081208054840190555b82811015610d0257610ce8600a80546001019055565b610cfa33610cf5600a5490565b611893565b600101610cd2565b5060008051602061290a833981519152610d1a6117a0565b60405190815260200160405180910390a1505060016007555050565b6000610d41826119d5565b506000908152600460205260409020546001600160a01b031690565b6000610d68826111f1565b9050806001600160a01b0316836001600160a01b03161415610dd65760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610b8b565b336001600160a01b0382161480610df25750610df281336109e1565b610e645760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c00006064820152608401610b8b565b610e6e8383611a34565b505050565b610e7b611aa2565b601591909155601655565b610e903382611afc565b610eac5760405162461bcd60e51b8152600401610b8b90612703565b610e6e838383611b7b565b610ebf611aa2565b601a55565b610ecc611aa2565b60026007541415610eef5760405162461bcd60e51b8152600401610b8b90612751565b6002600755604051600090339047908381818185875af1925050503d8060008114610f36576040519150601f19603f3d011682016040523d82523d6000602084013e610f3b565b606091505b5050905080610f5d576040516327fcd9d160e01b815260040160405180910390fd5b506001600755565b610e6e838383604051806020016040528060008152506114bc565b610f88611aa2565b601191909155601255565b60026007541415610fb65760405162461bcd60e51b8152600401610b8b90612751565b6002600755323314610fdb57604051633458477760e01b815260040160405180910390fd5b610fe3611865565b61100057604051630fe219dd60e21b815260040160405180910390fd5b60028160175461101091906127b9565b111561102f57604051631001fccd60e01b815260040160405180910390fd5b3360009081526018602052604090205460029061104d9083906127b9565b111561106c5760405163e222758f60e01b815260040160405180910390fd5b8060195461107a91906127e5565b34101561109a5760405163311c9fd160e01b815260040160405180910390fd5b60178054820190553360009081526018602052604081208054830190555b818110156110e3576110ce600a80546001019055565b6110db33610cf5600a5490565b6001016110b8565b5060008051602061290a8339815191526110fb6117a0565b60405190815260200160405180910390a1506001600755565b600080601a541180156111295750601a544210155b905090565b611136611aa2565b600260075414156111595760405162461bcd60e51b8152600401610b8b90612751565b6002600755600b54610384906111709083906127b9565b111561118f57604051632a3b0a3360e11b815260040160405180910390fd5b60005b818110156111bd576111a8600a80546001019055565b6111b533610cf5600a5490565b600101611192565b50600b80548201905560008051602061290a8339815191526110fb6117a0565b6111e5611aa2565b610e6e60088383612128565b6000818152600260205260408120546001600160a01b031680610ad05760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610b8b565b6008805461125e90612847565b80601f016020809104026020016040519081016040528092919081815260200182805461128a90612847565b80156112d75780601f106112ac576101008083540402835291602001916112d7565b820191906000526020600020905b8154815290600101906020018083116112ba57829003601f168201915b505050505081565b60006001600160a01b0382166113495760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610b8b565b506001600160a01b031660009081526003602052604090205490565b61136d611aa2565b6113776000611d17565b565b611381611aa2565b600f55565b60006012544210801561112957505060115442101590565b600260075414156113c15760405162461bcd60e51b8152600401610b8b90612751565b60026007553233146113e657604051633458477760e01b815260040160405180910390fd5b6113ee611114565b61140b57604051630fe219dd60e21b815260040160405180910390fd5b606481601b5461141b91906127b9565b111561143a57604051636061bfff60e11b815260040160405180910390fd5b80601c5461144891906127e5565b3410156114685760405163311c9fd160e01b815260040160405180910390fd5b601b80548201905560005b818110156110e357611489600a80546001019055565b61149633610cf5600a5490565b600101611473565b606060018054610ae590612847565b6114b8338383611d69565b5050565b6114c63383611afc565b6114e25760405162461bcd60e51b8152600401610b8b90612703565b6114ee84848484611e38565b50505050565b6114fc611aa2565b6002600754141561151f5760405162461bcd60e51b8152600401610b8b90612751565b6002600755600b54610384906115369083906127b9565b111561155557604051632a3b0a3360e11b815260040160405180910390fd5b60005b818110156115b65761156e600a80546001019055565b6115ae83838381811061159157634e487b7160e01b600052603260045260246000fd5b90506020020160208101906115a691906121dd565b600a54611893565b600101611558565b50600b80548201905560008051602061290a8339815191526115d66117a0565b60405190815260200160405180910390a150506001600755565b60606115fb826119d5565b6000611605611e6b565b905060008151116116255760405180602001604052806000815250611653565b8061162f84611e7a565b60096040516020016116439392919061259f565b6040516020818303038152906040525b9392505050565b6002600754141561167d5760405162461bcd60e51b8152600401610b8b90612751565b60026007553233146116a257604051633458477760e01b815260040160405180910390fd5b6116aa611386565b6116c757604051630fe219dd60e21b815260040160405180910390fd5b610bb860135460016116d991906127b9565b11156116f8576040516328a6a5c560e21b815260040160405180910390fd5b3360009081526014602052604090205460019061171590826127b9565b11156117345760405163e222758f60e01b815260040160405180910390fd5b60138054600190810190915533600090815260146020526040902080549091019055611764600a80546001019055565b61177133610cf5600a5490565b60008051602061290a8339815191526117886117a0565b60405190815260200160405180910390a16001600755565b60006117ab600a5490565b61271003905090565b6117bc611aa2565b600c91909155600d55565b6000600d5442108015611129575050600c5442101590565b6117e7611aa2565b6001600160a01b03811661184c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610b8b565b61185581611d17565b50565b6009805461125e90612847565b60006016544210801561112957505060155442101590565b60008261188a8584611f94565b14949350505050565b6001600160a01b0382166118e95760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610b8b565b6000818152600260205260409020546001600160a01b03161561194e5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610b8b565b6001600160a01b03821660009081526003602052604081208054600192906119779084906127b9565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000818152600260205260409020546001600160a01b03166118555760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610b8b565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611a69826111f1565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6006546001600160a01b031633146113775760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b8b565b600080611b08836111f1565b9050806001600160a01b0316846001600160a01b03161480611b4f57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b80611b735750836001600160a01b0316611b6884610d36565b6001600160a01b0316145b949350505050565b826001600160a01b0316611b8e826111f1565b6001600160a01b031614611bf25760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610b8b565b6001600160a01b038216611c545760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610b8b565b611c5f600082611a34565b6001600160a01b0383166000908152600360205260408120805460019290611c88908490612804565b90915550506001600160a01b0382166000908152600360205260408120805460019290611cb69084906127b9565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b03161415611dcb5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610b8b565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611e43848484611b7b565b611e4f84848484611fef565b6114ee5760405162461bcd60e51b8152600401610b8b906126b1565b606060088054610ae590612847565b606081611e9e5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611ec85780611eb281612882565b9150611ec19050600a836127d1565b9150611ea2565b60008167ffffffffffffffff811115611ef157634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611f1b576020820181803683370190505b5090505b8415611b7357611f30600183612804565b9150611f3d600a8661289d565b611f489060306127b9565b60f81b818381518110611f6b57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350611f8d600a866127d1565b9450611f1f565b600081815b8451811015611fe757611fd382868381518110611fc657634e487b7160e01b600052603260045260246000fd5b60200260200101516120fc565b915080611fdf81612882565b915050611f99565b509392505050565b60006001600160a01b0384163b156120f157604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612033903390899088908890600401612661565b602060405180830381600087803b15801561204d57600080fd5b505af192505050801561207d575060408051601f3d908101601f1916820190925261207a918101906124db565b60015b6120d7573d8080156120ab576040519150601f19603f3d011682016040523d82523d6000602084013e6120b0565b606091505b5080516120cf5760405162461bcd60e51b8152600401610b8b906126b1565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611b73565b506001949350505050565b6000818310612118576000828152602084905260409020611653565b5060009182526020526040902090565b82805461213490612847565b90600052602060002090601f016020900481019282612156576000855561219c565b82601f1061216f5782800160ff1982351617855561219c565b8280016001018555821561219c579182015b8281111561219c578235825591602001919060010190612181565b506121a89291506121ac565b5090565b5b808211156121a857600081556001016121ad565b80356001600160a01b03811681146121d857600080fd5b919050565b6000602082840312156121ee578081fd5b611653826121c1565b60008060408385031215612209578081fd5b612212836121c1565b9150612220602084016121c1565b90509250929050565b60008060006060848603121561223d578081fd5b612246846121c1565b9250612254602085016121c1565b9150604084013590509250925092565b60008060008060808587031215612279578081fd5b612282856121c1565b935060206122918187016121c1565b935060408601359250606086013567ffffffffffffffff808211156122b4578384fd5b818801915088601f8301126122c7578384fd5b8135818111156122d9576122d96128dd565b6122eb601f8201601f19168501612788565b91508082528984828501011115612300578485fd5b8084840185840137810190920192909252939692955090935050565b6000806040838503121561232e578182fd5b612337836121c1565b91506020830135801515811461234b578182fd5b809150509250929050565b60008060408385031215612368578182fd5b612371836121c1565b946020939093013593505050565b60008060208385031215612391578182fd5b823567ffffffffffffffff808211156123a8578384fd5b818501915085601f8301126123bb578384fd5b8135818111156123c9578485fd5b8660208260051b85010111156123dd578485fd5b60209290920196919550909350505050565b600080600060608486031215612403578283fd5b833567ffffffffffffffff8082111561241a578485fd5b818601915086601f83011261242d578485fd5b8135602082821115612441576124416128dd565b8160051b9250612452818401612788565b8281528181019085830185870184018c101561246c57898afd5b8996505b8487101561248e578035835260019690960195918301918301612470565b509a918901359950506040909701359695505050505050565b6000602082840312156124b8578081fd5b5035919050565b6000602082840312156124d0578081fd5b8135611653816128f3565b6000602082840312156124ec578081fd5b8151611653816128f3565b60008060208385031215612509578081fd5b823567ffffffffffffffff80821115612520578283fd5b818501915085601f830112612533578283fd5b813581811115612541578384fd5b8660208285010111156123dd578384fd5b60008060408385031215612564578182fd5b50508035926020909101359150565b6000815180845261258b81602086016020860161281b565b601f01601f19169290920160200192915050565b6000845160206125b28285838a0161281b565b8551918401916125c58184848a0161281b565b85549201918390600181811c90808316806125e157607f831692505b8583108114156125ff57634e487b7160e01b88526022600452602488fd5b808015612613576001811461262457612650565b60ff19851688528388019550612650565b60008b815260209020895b858110156126485781548a82015290840190880161262f565b505083880195505b50939b9a5050505050505050505050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061269490830184612573565b9695505050505050565b6020815260006116536020830184612573565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b604051601f8201601f1916810167ffffffffffffffff811182821017156127b1576127b16128dd565b604052919050565b600082198211156127cc576127cc6128b1565b500190565b6000826127e0576127e06128c7565b500490565b60008160001904831182151516156127ff576127ff6128b1565b500290565b600082821015612816576128166128b1565b500390565b60005b8381101561283657818101518382015260200161281e565b838111156114ee5750506000910152565b600181811c9082168061285b57607f821691505b6020821081141561287c57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415612896576128966128b1565b5060010190565b6000826128ac576128ac6128c7565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b03198116811461185557600080fdfe176b02bb2d12439ff7a20b59f402cca16c76f50508b13ef3166a600eb719354aa26469706673582212203b5fb30173501e6070d1ef7bff8bc2b94fd7c93b28e8a3bad33d754ff354c0bd64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 178,
        "contract": "contracts/IMP.sol:IMP",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 180,
        "contract": "contracts/IMP.sol:IMP",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 184,
        "contract": "contracts/IMP.sol:IMP",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 188,
        "contract": "contracts/IMP.sol:IMP",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 192,
        "contract": "contracts/IMP.sol:IMP",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 198,
        "contract": "contracts/IMP.sol:IMP",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 7,
        "contract": "contracts/IMP.sol:IMP",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/IMP.sol:IMP",
        "label": "_status",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2357,
        "contract": "contracts/IMP.sol:IMP",
        "label": "baseURI",
        "offset": 0,
        "slot": "8",
        "type": "t_string_storage"
      },
      {
        "astId": 2360,
        "contract": "contracts/IMP.sol:IMP",
        "label": "baseUriSuffix",
        "offset": 0,
        "slot": "9",
        "type": "t_string_storage"
      },
      {
        "astId": 2393,
        "contract": "contracts/IMP.sol:IMP",
        "label": "totalSupply",
        "offset": 0,
        "slot": "10",
        "type": "t_struct(Counter)1503_storage"
      },
      {
        "astId": 2395,
        "contract": "contracts/IMP.sol:IMP",
        "label": "foundersAmountMinted",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 2397,
        "contract": "contracts/IMP.sol:IMP",
        "label": "wlSaleStartTime",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 2399,
        "contract": "contracts/IMP.sol:IMP",
        "label": "wlSaleEndTime",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 2403,
        "contract": "contracts/IMP.sol:IMP",
        "label": "whitelistClaimed",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2405,
        "contract": "contracts/IMP.sol:IMP",
        "label": "merkleRoot",
        "offset": 0,
        "slot": "15",
        "type": "t_bytes32"
      },
      {
        "astId": 2407,
        "contract": "contracts/IMP.sol:IMP",
        "label": "preSaleAmountMinted",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 2409,
        "contract": "contracts/IMP.sol:IMP",
        "label": "freeSaleStartTime",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 2411,
        "contract": "contracts/IMP.sol:IMP",
        "label": "freeSaleEndTime",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 2413,
        "contract": "contracts/IMP.sol:IMP",
        "label": "freeSaleAmountMinted",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 2417,
        "contract": "contracts/IMP.sol:IMP",
        "label": "freeSaleClaimed",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2422,
        "contract": "contracts/IMP.sol:IMP",
        "label": "cashierSaleStartTime",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 2424,
        "contract": "contracts/IMP.sol:IMP",
        "label": "cashierSaleEndTime",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      },
      {
        "astId": 2426,
        "contract": "contracts/IMP.sol:IMP",
        "label": "cashierSaleAmountMinted",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 2430,
        "contract": "contracts/IMP.sol:IMP",
        "label": "cashierSaleClaimed",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2433,
        "contract": "contracts/IMP.sol:IMP",
        "label": "cashierSaleStartPrice",
        "offset": 0,
        "slot": "25",
        "type": "t_uint256"
      },
      {
        "astId": 2438,
        "contract": "contracts/IMP.sol:IMP",
        "label": "vipServiceSaleStartTime",
        "offset": 0,
        "slot": "26",
        "type": "t_uint256"
      },
      {
        "astId": 2440,
        "contract": "contracts/IMP.sol:IMP",
        "label": "vipServiceSaleAmountMinted",
        "offset": 0,
        "slot": "27",
        "type": "t_uint256"
      },
      {
        "astId": 2443,
        "contract": "contracts/IMP.sol:IMP",
        "label": "vipServiceSaleStartPrice",
        "offset": 0,
        "slot": "28",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1503_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1502,
            "contract": "contracts/IMP.sol:IMP",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}